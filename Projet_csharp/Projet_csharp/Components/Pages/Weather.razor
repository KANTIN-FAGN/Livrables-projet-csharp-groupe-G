@page "/weather"
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<div class="container my-5">
    <div class="text-center">
        <h1 class="display-4 fw-bold mb-4 text-primary">Weather App</h1>
        <p class="text-muted">Recherchez les prévisions météo en temps réel pour n'importe quelle ville.</p>
    </div>

    <div class="d-flex justify-content-center mb-4">
        <div class="input-group w-50">
            <input type="text" class="form-control form-control-lg" @bind="city" placeholder="Entrez une ville..." aria-label="Rechercher une ville">
            <button class="btn btn-primary btn-lg" @onclick="FetchData">Rechercher</button>
        </div>
    </div>

    @if (dataWeather != null)
    {
        <div class="card shadow-lg border-0 rounded-4">
            <div class="card-body p-5 text-center bg-gradient-primary text-dark rounded-top">
                <h2 class="display-5 fw-bold">@dataAPI.name, @dataAPI.country</h2>
                <p class="mb-2">@ConvertUnixTimeToHour(dataWeather.current.dt, dataWeather.timezone_offset) h</p>
                <h1 class="display-1 fw-bold">@RoundTemperature(dataWeather?.current?.temp ?? 0)°C</h1>
                <p class="lead">@dataWeather.current.weather[0].main</p>
                <div>
                    <i class="@GetWeatherIcon(dataWeather.current.weather[0].main, IsDaytime(dataWeather.current.dt))" style="font-size: 100px;"></i>
                </div>
            </div>

            <div class="card-body bg-light">
                <div class="d-flex justify-content-around align-items-center">
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="text-center">
                            <p class="fw-bold">@ConvertUnixTimeToHour(dataWeather?.hourly?[i]?.dt ?? 0, dataWeather.timezone_offset) h</p>
                            <i class="@GetWeatherIcon(dataWeather?.hourly?[i]?.weather[0]?.main, IsDaytime(dataWeather?.hourly?[i]?.dt ?? 0))" style="font-size: 40px;"></i>
                            <p class="fw-bold mt-2">@RoundTemperature(dataWeather?.hourly?[i]?.temp ?? 0)°C</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(city))
    {
        <div class="alert alert-warning mt-4 text-center" role="alert">
            Impossible de trouver des données pour "<strong>@city</strong>". Veuillez vérifier le nom de la ville.
        </div>
    }
    else
    {
        <div class="text-center mt-5 text-muted">
            <p>Veuillez entrer une ville et cliquer sur <strong>Rechercher</strong>.</p>
        </div>
    }
</div>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
        <p class="mt-2 text-muted">Chargement des données météo...</p>
    </div>
}

@code {
    private string API_KEY = "e26c89711ed56d28ae9a6b0ac3506030";
    private string city;
    public DataAPI dataAPI;
    public DataWeather dataWeather;
    private bool isLoading = false;

    public async Task FetchData()
    {
        isLoading = true;
        try
        {
            var client = HttpClientFactory.CreateClient("WeatherAPI");
            var response = await client.GetFromJsonAsync<List<DataAPI>>($"https://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid=" + API_KEY);

            if (response != null && response.Count > 0)
            {
                dataAPI = response[0];
                await GetTimezone(dataAPI.lon, dataAPI.lat);
            }
            else
            {
                dataWeather = null;
                Console.WriteLine("No data returned from API.");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public async Task GetTimezone(float lon, float lat)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("WeatherAPI");
            var response = await client.GetFromJsonAsync<DataWeather>($"https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&units=metric&appid=" + API_KEY);

            if (response != null)
            {
                dataWeather = response;
            }
            else
            {
                dataWeather = null;
                Console.WriteLine("No timezone data returned from API.");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching timezone data: {ex.Message}");
        }
    }

    public string ConvertUnixTimeToHour(long unixTime, int timezoneOffset)
    {
        DateTime utcDateTime = DateTimeOffset.FromUnixTimeSeconds(unixTime).UtcDateTime;
        DateTime localDateTime = utcDateTime.AddSeconds(timezoneOffset);
        return localDateTime.ToString("HH");
    }

    public string RoundTemperature(double temp)
    {
        return Math.Round(temp).ToString();
    }

    private string GetWeatherIcon(string weatherMain, bool isDay)
    {
        return weatherMain switch
        {
            "Clear" => isDay ? "bi bi-brightness-high" : "bi bi-moon-stars",
            "Clouds" => isDay ? "bi bi-cloud-sun" : "bi bi-cloud-moon",
            "Rain" => "bi bi-cloud-rain",
            "Snow" => "bi bi-snow",
            "Thunderstorm" => "bi bi-cloud-lightning-rain",
            _ => "bi bi-question-circle"
        };
    }

    private bool IsDaytime(long dt)
    {
        return dt < dataWeather.current.sunset && dt > dataWeather.current.sunrise;
    }

    public class DataAPI
    {
        public string name { get; set; }
        public float lat { get; set; }
        public float lon { get; set; }
        public string country { get; set; }
    }

    public class DataWeather
    {
        public Current current { get; set; }
        public int timezone_offset { get; set; }
        public List<Hourly> hourly { get; set; }
    }

    public class Current
    {
        public long dt { get; set; }
        public long sunrise { get; set; }
        public long sunset { get; set; }
        public double temp { get; set; }
        public List<CurrentLstWeather> weather { get; set; }
    }

    public class CurrentLstWeather
    {
        public string main { get; set; }
    }

    public class Hourly
    {
        public long dt { get; set; }
        public double temp { get; set; }
        public List<HourlyWeather> weather { get; set; }
    }

    public class HourlyWeather
    {
        public string main { get; set; }
    }

}