@using System.Text.Json
@using System.IO
@page "/quiz"
@rendermode InteractiveServer

<PageTitle>Quiz Champion</PageTitle>

<div class="container d-flex">
    <!-- Section principale pour le quiz -->
    <div class="w-75">
        <div class="w-100 d-flex justify-content-center">
            <h1>Quiz Champion</h1>
        </div>

        @if (string.IsNullOrEmpty(UserName))
        {
            <!-- Saisie du nom d'utilisateur -->
            <div class="w-100 d-flex flex-column justify-content-center align-items-center" style="height: 40vh;">
                <div class="d-flex flex-column gap-4">
                    <h4>Veuillez entrer votre nom de candidat :</h4>
                    <InputText @bind-Value="UserName" class="form-control" placeholder="Nom De Candidat ..." @onkeydown="@(e => HandleKeyPress(e))" />
                    <button class="btn btn-primary" @onclick="StartQuiz">Commencer le quiz</button>
                    @if (showErrorMessage)
                    {
                        <p class="text-danger">Veuillez entrer un nom valide pour commencer.</p>
                    }
                </div>
            </div>
        }
        else if (!QuizCompleted)
        {
            <!-- Affichage du quiz -->
            <section class="d-flex flex-column w-100 align-items-center pt-5">
                <h3>Question @(currentQuestionIndex + 1)</h3>
                <p>@questions[currentQuestionIndex].Text</p>

                <!-- Conseil de l'expert -->
                @if (isJokerExpertUsed)
                {
                    @if (expertUsedOnQuestion == currentQuestionIndex)
                    {
                        <p class="text-primary"><strong>Conseil de l'expert :</strong> L'expert recommande la réponse : <strong>@expertAdvice</strong></p>
                    }
                    else
                    {
                        <p class="text-primary"><strong>Conseil de l'expert :</strong> Utilisé pour la question @(expertUsedOnQuestion + 1) ( <strong>@expertAdvice</strong> )</p>
                    }
                }

                <!-- Options de réponse -->
                @foreach (var option in questions[currentQuestionIndex].Options)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="question-@currentQuestionIndex" value="@option" 
                               @onchange="() => SelectAnswer(option)" checked="@((selectedAnswer == option) ? "checked" : null)" />
                        <label class="form-check-label">@option
                            @if (isJokerStatsUsed && stats.ContainsKey(option))
                            {
                                <span> (@stats[option]%)</span>
                            }
                        </label>
                    </div>
                }

                <!-- Bouton Suivant -->
                <button class="btn btn-secondary mt-3" @onclick="GoToNextQuestion" disabled="@isNextDisabled">Suivant</button>
            </section>

            <!-- Jokers -->
            <div class="d-flex justify-content-around w-100 pt-3">
                <button class="btn btn-warning" @onclick="UseJoker5050" disabled="@isJoker50Used">50:50</button>
                <button class="btn btn-info" @onclick="UseJokerStats" disabled="@isJokerStatsUsed">Afficher les stats</button>
                <button class="btn btn-primary" @onclick="UseJokerExpertAdvice" disabled="@isJokerExpertUsed">Appel à un expert</button>
            </div>
        }
        else
        {
            <!-- Affichage des résultats -->
            <div class="w-100 d-flex flex-column justify-content-center align-items-center pt-5">
                <h2>Félicitations @UserName!</h2>
                <p>@(quizFailed ? "Gain Potentiel : " + palier : "Vous avez gagné " + palier) €</p>

                <h3>Classement final</h3>
                <ul class="list-group">
                    @foreach (var player in leaderboard)
                    {
                        <li class="list-group-item">
                            <strong>@player.Name :</strong> @player.Score €
                        </li>
                    }
                </ul>

                <button class="btn btn-primary mt-3" @onclick="RestartQuiz">Rejouer</button>
            </div>
        }
    </div>

    <!-- Section des paliers -->
    <div class="w-25">
        <div class="d-flex flex-column align-items-end">
            <h4 style="margin-right: 30px;">Palier actuel</h4>
            <ul class="list-group">
                @for (int i = 0; i < paliers.Count; i++)
                {
                    <li class="list-group-item @(i == currentQuestionIndex ? "bg-warning" : "")">
                        Question @(i + 1) : @paliers[i] €
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private string questionsFilePath = "publish/wwwroot/data/questions.json";
    private List<Question> questions = new List<Question>();
    private string leaderboardFilePath = "publish/wwwroot/data/leaderboard.json";
    private List<Player> leaderboard = new List<Player>();

    private string UserName = "";
    private int currentQuestionIndex = 0;
    private int palier = 0;
    private bool QuizCompleted = false;
    private bool quizFailed = false;
    private string selectedAnswer = null;
    private bool isNextDisabled = true;
    private bool showErrorMessage = false;
    private bool isJoker50Used = false;
    private bool isJokerStatsUsed = false;
    private bool isJokerExpertUsed = false;
    private int expertUsedOnQuestion = -1;
    private Dictionary<string, int> stats = new Dictionary<string, int>();
    private string expertAdvice = "";

    private List<int> paliers = new List<int> { 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 125000, 250000, 500000, 1000000 };

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestionsAsync();
        LoadLeaderboard();
    }

    private async Task LoadQuestionsAsync()
    {
        if (File.Exists(questionsFilePath))
        {
            var json = await File.ReadAllTextAsync(questionsFilePath);
            questions = JsonSerializer.Deserialize<List<Question>>(json) ?? new List<Question>();
        }
    }

    private void LoadLeaderboard()
    {
        if (File.Exists(leaderboardFilePath))
        {
            var json = File.ReadAllText(leaderboardFilePath);
            leaderboard = JsonSerializer.Deserialize<List<Player>>(json) ?? new List<Player>();
        }
    }

    private void SaveLeaderboard()
    {
        var json = JsonSerializer.Serialize(leaderboard);
        File.WriteAllText(leaderboardFilePath, json);
    }

    private void StartQuiz()
    {
        if (string.IsNullOrWhiteSpace(UserName))
        {
            showErrorMessage = true;
        }
        else
        {
            ResetQuiz();
            StateHasChanged();
        }
    }

    private void ResetQuiz()
    {
        currentQuestionIndex = 0;
        palier = 0;
        QuizCompleted = false;
        quizFailed = false;
        selectedAnswer = null;
        isNextDisabled = true;
        isJoker50Used = false;
        isJokerStatsUsed = false;
        isJokerExpertUsed = false;
        expertUsedOnQuestion = -1;
        stats.Clear();
    }

    private void SelectAnswer(string option)
    {
        selectedAnswer = option;
        isNextDisabled = false;
    }

    private void GoToNextQuestion()
    {
        if (selectedAnswer == questions[currentQuestionIndex].CorrectAnswer)
        {
            palier = paliers[currentQuestionIndex];
        }
        else
        {
            quizFailed = true;
            QuizCompleted = true;
            UpdateLeaderboard();
            return;
        }

        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            selectedAnswer = null;
            isNextDisabled = true;
        }
        else
        {
            QuizCompleted = true;
        }

        UpdateLeaderboard();
        StateHasChanged();
    }

    private void UseJoker5050()
    {
        isJoker50Used = true;
        var incorrectOptions = questions[currentQuestionIndex].Options
            .Where(option => option != questions[currentQuestionIndex].CorrectAnswer)
            .OrderBy(x => Guid.NewGuid())
            .Take(2)
            .ToList();

        questions[currentQuestionIndex].Options.RemoveAll(option => incorrectOptions.Contains(option));
        StateHasChanged();
    }

    private void UseJokerStats()
    {
        isJokerStatsUsed = true;
        Random random = new Random();
        int remainingPercentage = 100;
        stats.Clear();

        foreach (var option in questions[currentQuestionIndex].Options)
        {
            int percentage = random.Next(remainingPercentage / questions[currentQuestionIndex].Options.Count);
            stats[option] = percentage;
            remainingPercentage -= percentage;
        }

        stats[questions[currentQuestionIndex].CorrectAnswer] = remainingPercentage;
        StateHasChanged();
    }

    private void UseJokerExpertAdvice()
    {
        isJokerExpertUsed = true;
        expertAdvice = questions[currentQuestionIndex].CorrectAnswer;
        expertUsedOnQuestion = currentQuestionIndex;
        StateHasChanged();
    }

private void UpdateLeaderboard()
{
    // Vérifier si le joueur existe déjà dans le leaderboard
    var existingPlayer = leaderboard.FirstOrDefault(p => p.Name == UserName);

    if (existingPlayer != null)
    {
        // Mettre à jour le score du joueur si le nouveau score est plus élevé
        if (palier > existingPlayer.Score)
        {
            existingPlayer.Score = palier;
        }
    }
    else
    {
        // Ajouter un nouveau joueur avec son score
        leaderboard.Add(new Player { Name = UserName, Score = palier });
    }

    // Trier le leaderboard en ordre décroissant et ne garder que les 10 meilleurs scores
    leaderboard = leaderboard.OrderByDescending(p => p.Score).Take(20).ToList();
    
    // Enregistrer le leaderboard mis à jour
    SaveLeaderboard();
}


    private void RestartQuiz()
    {
        UserName = "";
        showErrorMessage = false;
        ResetQuiz();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            StartQuiz();
        }
    }

    public class Question
    {
        public string Text { get; set; }
        public List<string> Options { get; set; }
        public string CorrectAnswer { get; set; }
    }

    public class Player
    {
        public string Name { get; set; }
        public int Score { get; set; }
    }
}
