@using System.Text.Json
@using System.Text.Json.Serialization
@page "/quiz"
@rendermode InteractiveServer

<PageTitle>Quiz Champion</PageTitle>

<div class="w-100 d-flex justify-content-center">
    <h1>Quiz Champion</h1>
</div>

@if (string.IsNullOrEmpty(UserName))
{
    <!-- Écran de saisie du nom d'utilisateur -->
    <div class="w-100 d-flex flex-column justify-content-center align-items-center" style="height: 40vh;">
        <div class="d-flex flex-column gap-4">
            <h4>Veuillez entrer votre nom :</h4>
            <InputText @bind-Value="UserName" class="form-control" placeholder="Prénom Nom" @onkeydown="HandleKeyPress" />
            <button class="btn btn-primary" @onclick="StartQuiz">Commencer le quiz</button>
            @if (showErrorMessage)
            {
                <p class="text-danger">Veuillez entrer un nom valide pour commencer.</p>
            }
        </div>
    </div>
}
else if (!QuizCompleted)
{
    <!-- Écran du quiz -->
    <section class="d-flex flex-column w-100 align-items-center pt-5">
        <h3>Question @(currentQuestionIndex + 1)</h3>
        <p>@questions[currentQuestionIndex].Text</p>

        @foreach (var option in questions[currentQuestionIndex].Options)
        {
            <div class="form-check">
                <input class="form-check-input" type="radio" name="question-@currentQuestionIndex" value="@option" @onchange="() => SelectAnswer(option)" checked="@((selectedAnswer == option) ? true : false)" />
                <label class="form-check-label">@option</label>
            </div>
        }

        <button class="btn btn-secondary mt-3" @onclick="GoToNextQuestion" disabled="@isNextDisabled">Suivant</button>
    </section>

    <!-- Affichage des paliers -->
    <div class="w-100 d-flex flex-column align-items-center pt-3">
        <h4>Palier actuel</h4>
        <ul class="list-group">
            @for (int i = 0; i < paliers.Count; i++)
            {
                <li class="list-group-item @(i == currentQuestionIndex ? "bg-warning" : "")">
                    Question @(i + 1) : @paliers[i] €
                </li>
            }
        </ul>
    </div>
}
else
{
    <!-- Écran des résultats -->
    <div class="w-100 d-flex flex-column justify-content-center align-items-center pt-5">
        <h2>Félicitations @UserName!</h2>
        <p>@(quizFailed ? "Gain Potentiel : " + palier : "Vous avez gagné " + palier) €</p>

        <h3>Classement final</h3>
        <ul class="list-group">
            @foreach (var player in leaderboard)
            {
                <li class="list-group-item">
                    <strong>@player.Name :</strong> @player.Score €
                </li>
            }
        </ul>

        <button class="btn btn-primary mt-3" @onclick="RestartQuiz">Rejouer</button>
    </div>
}

@code {
    private string UserName = "";
    private int currentQuestionIndex = 0;
    private int palier = 0;
    private bool QuizCompleted = false;
    private bool quizFailed = false; // Variable pour indiquer si le joueur a échoué
    private string selectedAnswer = null;
    private bool isNextDisabled = true;
    private bool showErrorMessage = false;

    private List<Player> leaderboard = new List<Player>();

    // Les paliers de gain comme dans "Qui veut gagner des millions"
    private List<int> paliers = new List<int> { 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 125000, 250000, 500000, 1000000 };

    private List<Question> questions = new List<Question>
    {
        new Question { Text = "Quelle est la capitale de la France ?", Options = new List<string> { "Paris", "Londres", "Berlin", "Madrid" }, CorrectAnswer = "Paris", PalierGain = 500 },
        new Question { Text = "Quel est le plus grand océan ?", Options = new List<string> { "Atlantique", "Indien", "Pacifique", "Arctique" }, CorrectAnswer = "Pacifique", PalierGain = 1000 },
        new Question { Text = "Qui a peint la Joconde ?", Options = new List<string> { "Van Gogh", "Picasso", "Leonard de Vinci", "Rembrandt" }, CorrectAnswer = "Leonard de Vinci", PalierGain = 2000 },
        new Question { Text = "Combien y a-t-il de planètes dans le système solaire ?", Options = new List<string> { "7", "8", "9", "10" }, CorrectAnswer = "8", PalierGain = 4000 },
        new Question { Text = "Qui a écrit 'Les Misérables' ?", Options = new List<string> { "Victor Hugo", "Emile Zola", "Jean-Paul Sartre", "Albert Camus" }, CorrectAnswer = "Victor Hugo", PalierGain = 8000 },
        // Ajouter d'autres questions ici si nécessaire
    };

    private void StartQuiz()
    {
        if (string.IsNullOrWhiteSpace(UserName))
        {
            showErrorMessage = true; // Affiche un message d'erreur si le nom d'utilisateur est vide
        }
        else
        {
            // Initialisation du quiz
            currentQuestionIndex = 0;
            palier = 0;
            QuizCompleted = false;
            quizFailed = false; // Réinitialiser l'échec du quiz
            selectedAnswer = null;
            isNextDisabled = true; // Désactive le bouton "Suivant" jusqu'à ce qu'une réponse soit sélectionnée
            showErrorMessage = false; // Masque le message d'erreur
            UpdateLeaderboard(); // Mise à jour du classement en temps réel
            StateHasChanged(); // Actualise l'interface utilisateur
        }
    }

    private void SelectAnswer(string option)
    {
        selectedAnswer = option;
        isNextDisabled = false; // Active le bouton "Suivant"
    }

    private void GoToNextQuestion()
    {
        if (selectedAnswer == questions[currentQuestionIndex].CorrectAnswer)
        {
            palier = paliers[currentQuestionIndex]; // Met à jour le palier selon la question correcte
        }
        else
        {
            // Si mauvaise réponse, terminer le quiz
            quizFailed = true;
            QuizCompleted = true;
            UpdateLeaderboard();
            return; // Quitter la méthode pour éviter de passer à la question suivante
        }

        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            selectedAnswer = null; // Réinitialise la réponse sélectionnée
            isNextDisabled = true; // Désactive le bouton "Suivant" jusqu'à ce qu'une nouvelle réponse soit sélectionnée
        }
        else
        {
            QuizCompleted = true; // Terminer le quiz après la dernière question
        }

        UpdateLeaderboard(); // Mise à jour du classement en temps réel
        StateHasChanged(); // Actualise l'interface utilisateur
    }

    private void UpdateLeaderboard()
    {
        // Ajouter le joueur au classement avec son score actuel s'il n'est pas déjà présent
        var existingPlayer = leaderboard.FirstOrDefault(p => p.Name == UserName);
        if (existingPlayer != null)
        {
            existingPlayer.Score = palier; // Met à jour le score existant
        }
        else
        {
            leaderboard.Add(new Player { Name = UserName, Score = palier });
        }

        leaderboard = leaderboard.OrderByDescending(p => p.Score).Take(10).ToList(); // Garde seulement les 10 meilleurs scores
    }

    private void RestartQuiz()
    {
        // Réinitialisation complète du quiz
        UserName = "";
        currentQuestionIndex = 0;
        palier = 0;
        QuizCompleted = false;
        quizFailed = false;
        selectedAnswer = null;
        isNextDisabled = true;
        showErrorMessage = false;
        StateHasChanged(); // Actualise l'interface utilisateur
    }

    // Gérer l'événement de pression sur la touche "Entrée"
    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            StartQuiz();
        }
    }

    // Classe représentant une question
    public class Question
    {
        public string Text { get; set; }
        public List<string> Options { get; set; }
        public string CorrectAnswer { get; set; }
        public int PalierGain { get; set; }
    }

    // Classe représentant un joueur dans le classement
    public class Player
    {
        public string Name { get; set; }
        public int Score { get; set; }
    }
}
