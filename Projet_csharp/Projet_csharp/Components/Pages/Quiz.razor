@page "/quiz"
@rendermode InteractiveServer

<PageTitle>Quiz Champion</PageTitle>

<div class="w-100 d-flex justify-content-center">
    <h1>Quiz Champion</h1>
</div>

@if (string.IsNullOrEmpty(UserName))
{
    <!-- USERNAME INPUT SCREEN -->
    <div class="w-100 d-flex flex-column justify-content-center align-items-center" style="height: 40vh;">
        <div class="d-flex flex-column gap-4">
            <h4>Veuillez entrer votre nom :</h4>
            <InputText @bind-Value="UserName" class="form-control" placeholder="Prénom Nom" />
            <button class="btn btn-primary" @onclick="StartQuiz">Commencer le quiz</button>
            @if (showErrorMessage)
            {
                <p class="text-danger">Veuillez entrer un nom valide pour commencer.</p>
            }
        </div>
    </div>
}
else if (!QuizCompleted)
{
    <!-- QUIZ SCREEN -->
    <section class="d-flex flex-column w-100 align-items-center pt-5">
        <h3>Question @(currentQuestionIndex + 1)</h3>
        <p>@questions[currentQuestionIndex].Text</p>

        @foreach (var option in questions[currentQuestionIndex].Options)
        {
            <div class="form-check">
                <input class="form-check-input" type="radio" name="question-@currentQuestionIndex" value="@option" @onchange="() => SelectAnswer(option)" />
                <label class="form-check-label">@option</label>
            </div>
        }

        <button class="btn btn-secondary" @onclick="GoToNextQuestion" disabled="@isNextDisabled">Suivant</button>
    </section>
}
else
{
    <!-- RESULTS SCREEN -->
    <div class="w-100 d-flex flex-column justify-content-center align-items-center pt-5">
        <h2>Félicitations @UserName!</h2>
        <p>Vous avez complété le quiz avec un palier de : @palier €</p>

        <h3>Classement</h3>
        <ul class="list-group">
            @foreach (var player in leaderboard)
            {
                <li class="list-group-item">
                    <strong>@player.Name :</strong> @player.Score €
                </li>
            }
        </ul>

        <button class="btn btn-primary mt-3" @onclick="RestartQuiz">Rejouer</button>
    </div>
}

@code {
    private string UserName = "";
    private int currentQuestionIndex = 0;
    private int palier = 0;
    private bool QuizCompleted = false;
    private string selectedAnswer = null;
    private bool isNextDisabled = true;
    private bool showErrorMessage = false; // Corrected to use this instead of 'gameStarted'

    private List<Player> leaderboard = new List<Player>();

    private List<Question> questions = new List<Question>
    {
        new Question { Text = "Quelle est la capitale de la France ?", Options = new List<string> { "Paris", "Londres", "Berlin", "Madrid" }, CorrectAnswer = "Paris", PalierGain = 500 },
        new Question { Text = "Quel est le plus grand océan ?", Options = new List<string> { "Atlantique", "Indien", "Pacifique", "Arctique" }, CorrectAnswer = "Pacifique", PalierGain = 1000 },
        new Question { Text = "Qui a peint la Joconde ?", Options = new List<string> { "Van Gogh", "Picasso", "Leonard de Vinci", "Rembrandt" }, CorrectAnswer = "Leonard de Vinci", PalierGain = 2000 },
        new Question { Text = "Combien y a-t-il de planètes dans le système solaire ?", Options = new List<string> { "7", "8", "9", "10" }, CorrectAnswer = "8", PalierGain = 4000 },
        new Question { Text = "Qui a écrit 'Les Misérables' ?", Options = new List<string> { "Victor Hugo", "Emile Zola", "Jean-Paul Sartre", "Albert Camus" }, CorrectAnswer = "Victor Hugo", PalierGain = 8000 },
        // Add more questions if necessary
    };

    private void StartQuiz()
    {
        if (string.IsNullOrWhiteSpace(UserName))
        {
            showErrorMessage = true; // Show error if username is empty
        }
        else
        {
            currentQuestionIndex = 0;
            palier = 0;
            QuizCompleted = false;
            selectedAnswer = null;
            isNextDisabled = true; // Disable next button until answer is selected
            showErrorMessage = false; // Hide error message
            StateHasChanged(); // Refresh UI
        }
    }

    private void SelectAnswer(string option)
    {
        selectedAnswer = option;
        isNextDisabled = false; // Enable next button
    }

    private void GoToNextQuestion()
    {
        if (selectedAnswer == questions[currentQuestionIndex].CorrectAnswer)
        {
            palier += questions[currentQuestionIndex].PalierGain;
        }

        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            selectedAnswer = null; // Reset selected answer
            isNextDisabled = true; // Disable next button until answer is selected
        }
        else
        {
            QuizCompleted = true;
            UpdateLeaderboard();
        }

        StateHasChanged(); // Refresh UI
    }

    private void UpdateLeaderboard()
    {
        leaderboard.Add(new Player { Name = UserName, Score = palier });
        leaderboard = leaderboard.OrderByDescending(p => p.Score).Take(10).ToList(); // Keep top 10 scores
    }

    private void RestartQuiz()
    {
        UserName = string.Empty; // Reset username
        StartQuiz();
    }

    // Class to represent a question
    public class Question
    {
        public string Text { get; set; }
        public List<string> Options { get; set; }
        public string CorrectAnswer { get; set; }
        public int PalierGain { get; set; }
    }

    // Class to represent a player in the leaderboard
    public class Player
    {
        public string Name { get; set; }
        public int Score { get; set; }
    }
}
