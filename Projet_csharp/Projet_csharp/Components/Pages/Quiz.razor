@using System.Text.Json
@using System.IO
@using System.Text.Json.Serialization
@page "/quiz"
@rendermode InteractiveServer

<link href="../quiz.css" rel="stylesheet" />

<PageTitle>Quiz Champion</PageTitle>

<div class="quiz-page">
    <div class="container d-flex">
        <!-- Section principale pour le quiz -->
        <div class="quiz-section w-75">
            <div class="w-100 d-flex justify-content-center">
                <h1>Quiz Champion</h1>
            </div>

            @if (string.IsNullOrEmpty(UserName))
            {
                <!-- Saisie du nom d'utilisateur -->
                <div class="w-100 d-flex flex-column justify-content-center align-items-center" style="height: 40vh;">
                    <div class="d-flex flex-column gap-4">
                        <h4>Veuillez entrer votre nom de candidat :</h4>
                        <InputText @bind-Value="UserName" class="form-control" placeholder="Nom De Candidat ..." @onkeydown="@(e => HandleKeyPress(e))" />
                        <button class="btn btn-primary" @onclick="StartQuiz">Commencer le quiz</button>
                        @if (showErrorMessage)
                        {
                            <p class="text-danger">Veuillez entrer un nom valide pour commencer.</p>
                        }
                    </div>
                </div>
            }
            else if (string.IsNullOrEmpty(SelectedMode))
            {
                <!-- Choix du mode de quiz -->
                <div class="w-100 d-flex flex-column justify-content-center align-items-center" style="height: 40vh;">
                    <h4>Choisissez un mode de questionnaire :</h4>
                    <button class="btn btn-primary mb-2" @onclick="SelectEuropeanMode">Mode Questionnaire Européen</button>
                    <button class="btn btn-secondary" @onclick="SelectGlobalMode">Mode Questionnaire Global</button>
                </div>
            }
            else if (!QuizCompleted && questions.Count > 0 && currentQuestionIndex < questions.Count)
            {
                <!-- Affichage du quiz -->
                <section class="d-flex flex-column w-100 align-items-center pt-5">
                    <h3>Question @(currentQuestionIndex + 1)</h3>
                    <p>@questions[currentQuestionIndex].Question</p>

                    <!-- Options de réponse faire aussi en sorte de cliquer sur la réponse elle meme ca fonctionne -->
                  @foreach (var option in questions[currentQuestionIndex].Options)
{
    <div class="form-check">
        <input class="form-check-input" type="radio" id="option-@option" name="question-@currentQuestionIndex" value="@option" 
               @onchange="() => SelectAnswer(option)" />
        <label class="form-check-label" for="option-@option">@option</label>
    </div>
}


                    <!-- Bouton Suivant -->
                    <button class="btn btn-secondary mt-3" @onclick="GoToNextQuestion" disabled="@isNextDisabled">Suivant</button>
                </section>

                <!-- Jokers alignés -->
               <div class="d-flex justify-content-around w-100 pt-3 jokers">
                    <button class="btn btn-info" @onclick="UseJokerStats" disabled="@isJokerStatsUsed">Afficher les stats</button>
                    <button class="btn btn-warning" @onclick="UseJoker5050" disabled="@isJoker50Used">50:50</button>
                    <button class="btn btn-primary" @onclick="UseJokerExpertAdvice" disabled="@isJokerExpertUsed">Appel à un expert</button>
                </div>

                <!-- Affichage des statistiques si le joker a été utilisé -->
                @if (isJokerStatsUsed)
                {
                    <div class="mt-4">
                        <h5>Statistiques des réponses :</h5>
                        <ul>
                            @foreach (var stat in stats)
                            {
                                <li>@stat.Key : @stat.Value %</li>
                            }
                        </ul>
                    </div>
                }

                <!-- Affichage du conseil de l'expert si le joker a été utilisé -->
                @if (isJokerExpertUsed && expertUsedOnQuestion == currentQuestionIndex)
                {
                    <div class="mt-4">
                        <h5>Conseil de l'expert :</h5>
                        <p>@expertAdvice</p>
                    </div>
                }
            }
            else
            {
                <!-- Affichage des résultats -->
                <div class="w-100 d-flex flex-column justify-content-center align-items-center pt-5">
                    <h2>Félicitations @UserName!</h2>
                    <p>@(quizFailed ? "Gain Potentiel : " + palier : "Vous avez gagné " + palier) €</p>

                    <h3>Classement final</h3>
                    <ul class="list-group">
                        @foreach (var player in leaderboard)
                        {
                            <li class="list-group-item">
                                <strong>@player.Name :</strong> @player.Score € 
                            </li>
                        }
                    </ul>

                    <button class="btn btn-primary mt-3" @onclick="RestartQuiz">Rejouer</button>
                </div>
            }
        </div>

        <!-- Section des paliers -->
        <div class="paliers w-25">
            <h4 style="margin-right: 30px;">Palier actuel</h4>
            <ul class="list-group">
                @for (int i = 0; i < paliers.Count; i++)
                {
                    <li class="list-group-item @(i == currentQuestionIndex ? "bg-warning" : "")">
                        Question @(i + 1) : @paliers[i] €
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private string questionsFilePath = Path.Combine(AppContext.BaseDirectory, "publish", "wwwroot", "data", "questions.json");
    private List<QuizQuestion> questions = new List<QuizQuestion>();
    private string leaderboardFilePath = Path.Combine(AppContext.BaseDirectory, "publish", "wwwroot", "data", "leaderboard.json");
    private List<Player> leaderboard = new List<Player>();

    private string UserName = "";
    private string SelectedMode = "";
    private int currentQuestionIndex = 0;
    private int palier = 0;
    private bool QuizCompleted = false;
    private bool quizFailed = false;
    private string selectedAnswer = null;
    private bool isNextDisabled = true;
    private bool showErrorMessage = false;
    private bool isJoker50Used = false;
    private bool isJokerStatsUsed = false;
    private bool isJokerExpertUsed = false;
    private int expertUsedOnQuestion = -1;
    private Dictionary<string, int> stats = new Dictionary<string, int>();
    private string expertAdvice = "";

    private List<int> paliers = new List<int> { 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 125000, 250000, 500000, 1000000 };

    protected override async Task OnInitializedAsync()
    {
        await LoadLeaderboardAsync();
        await LoadQuestionsAsync();
    }

    private async Task LoadQuestionsAsync()
    {
        if (File.Exists(questionsFilePath))
        {
            var json = await File.ReadAllTextAsync(questionsFilePath);

            try
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                var quizData = JsonSerializer.Deserialize<QuizData>(json, options);

                if (quizData == null || quizData.Questions == null || !quizData.Questions.Any())
                {
                    QuizCompleted = true;
                    return;
                }

                questions = quizData.Questions
                    .Where(q => !string.IsNullOrEmpty(q.Theme) && 
                                q.Theme.Equals(SelectedMode, StringComparison.OrdinalIgnoreCase))
                    .ToList();

                if (questions.Count == 0)
                {
                    QuizCompleted = true;
                    return;
                }
            }
            catch (JsonException)
            {
                questions = new List<QuizQuestion>();
                QuizCompleted = true;
            }
        }
        else
        {
            QuizCompleted = true;
        }
    }

    private async Task LoadLeaderboardAsync()
    {
        if (File.Exists(leaderboardFilePath))
        {
            var json = await File.ReadAllTextAsync(leaderboardFilePath);
            leaderboard = JsonSerializer.Deserialize<List<Player>>(json) ?? new List<Player>();
        }
    }

    private async Task SaveLeaderboardAsync()
    {
        var json = JsonSerializer.Serialize(leaderboard);
        await File.WriteAllTextAsync(leaderboardFilePath, json);
    }

    private void StartQuiz()
    {
        if (string.IsNullOrWhiteSpace(UserName))
        {
            showErrorMessage = true;
        }
        else
        {
            showErrorMessage = false;
            StateHasChanged();
        }
    }

    private async void SelectMode(string mode)
    {
        SelectedMode = mode;
        await LoadQuestionsAsync();
        ResetQuiz();
        StateHasChanged();
    }

    private void ResetQuiz()
    {
        currentQuestionIndex = 0;
        palier = 0;
        QuizCompleted = false;
        quizFailed = false;
        selectedAnswer = null;
        isNextDisabled = true;
        isJoker50Used = false;
        isJokerStatsUsed = false;
        isJokerExpertUsed = false;
        expertUsedOnQuestion = -1;
        stats.Clear();
    }

    private void SelectEuropeanMode() => SelectMode("European");
    private void SelectGlobalMode() => SelectMode("Global");

    private void SelectAnswer(string option)
    {
        selectedAnswer = option;
        isNextDisabled = false;
    }

    private void GoToNextQuestion()
    {
        if (selectedAnswer == questions[currentQuestionIndex].CorrectAnswer)
        {
            palier = paliers[currentQuestionIndex];
        }
        else
        {
            quizFailed = true;
            QuizCompleted = true;
            UpdateLeaderboardAsync();
            return;
        }

        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            selectedAnswer = null;
            isNextDisabled = true;
        }
        else
        {
            QuizCompleted = true;
            UpdateLeaderboardAsync();
        }

        StateHasChanged();
    }

    private void UseJoker5050()
    {
        isJoker50Used = true;
        var incorrectOptions = questions[currentQuestionIndex].Options
            .Where(option => option != questions[currentQuestionIndex].CorrectAnswer)
            .OrderBy(x => Guid.NewGuid())
            .Take(2)
            .ToList();

        questions[currentQuestionIndex].Options.RemoveAll(option => incorrectOptions.Contains(option));
        StateHasChanged();
    }

    private void UseJokerStats()
    {
        isJokerStatsUsed = true;
        Random random = new Random();
        int remainingPercentage = 100;
        stats.Clear();

        var options = questions[currentQuestionIndex].Options.ToList();
        foreach (var option in options)
        {
            if (option == questions[currentQuestionIndex].CorrectAnswer)
            {
                continue;
            }

            int percentage = random.Next(1, remainingPercentage / options.Count + 1);
            stats[option] = percentage;
            remainingPercentage -= percentage;
        }

        stats[questions[currentQuestionIndex].CorrectAnswer] = remainingPercentage;
        StateHasChanged();
    }

    private void UseJokerExpertAdvice()
    {
        isJokerExpertUsed = true;
        expertAdvice = $"L'expert vous conseille : '{questions[currentQuestionIndex].CorrectAnswer}'";
        expertUsedOnQuestion = currentQuestionIndex;
        StateHasChanged();
    }

    private async Task UpdateLeaderboardAsync()
    {
        var existingPlayer = leaderboard.FirstOrDefault(p => p.Name == UserName);

        if (existingPlayer != null)
        {
            if (palier > existingPlayer.Score)
            {
                existingPlayer.Score = palier;
            }
        }
        else
        {
            leaderboard.Add(new Player { Name = UserName, Score = palier });
        }

        leaderboard = leaderboard.OrderByDescending(p => p.Score).Take(10).ToList();
        await SaveLeaderboardAsync();
    }

    private void RestartQuiz()
    {
        UserName = "";
        SelectedMode = "";
        showErrorMessage = false;
        ResetQuiz();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            StartQuiz();
        }
    }

    public class QuizQuestion
    {
        public int Id { get; set; }
        public string Theme { get; set; }
        public string Difficulty { get; set; }
        public string Question { get; set; }
        public List<string> Options { get; set; }
        public string CorrectAnswer { get; set; }
    }

    public class QuizData
    {
        [JsonPropertyName("questions")]
        public List<QuizQuestion> Questions { get; set; }
    }

    public class Player
    {
        public string Name { get; set; }
        public int Score { get; set; }
    }
}
