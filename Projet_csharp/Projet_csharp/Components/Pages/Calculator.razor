@page "/calculator"
@rendermode InteractiveServer

<PageTitle>Calculator (Addition and Subtraction)</PageTitle>

<div class="d-flex flex-column justify-content-center align-items-center w-100 h-100">
    <h1>Calculator (Addition and Subtraction)</h1>

    <div class="bg-black" style="width: 450px; height: 720px; border-radius: 30px">
        <div class="h-25 d-flex justify-content-end align-items-end text display-3" style="margin-right: 1rem">
            <p role="status" class="text-white">@displayValue</p>
        </div>
        <div class="d-flex flex-column gap-2">
            <div class="d-flex flex-row justify-content-around">
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 25px" @onclick="Reset">AC</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 25px">±</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 25px" @onclick='() => SetOperation("%")'>%</button>
                <button class="btn rounded-circle" style="width: 100px; height: 100px; background-color: darkorange; color: white" @onclick='() => SetOperation("÷")'>÷</button>
            </div>
            <div class="d-flex flex-row justify-content-around">
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("7")'>7</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("8")'>8</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("9")'>9</button>
                <button class="btn rounded-circle" style="width: 100px; height: 100px; background-color: darkorange; color: white" @onclick='() => SetOperation("×")'>×</button>
            </div>
            <div class="d-flex flex-row justify-content-around">
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("4")'>4</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("5")'>5</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("6")'>6</button>
                <button class="btn rounded-circle" style="width: 100px; height: 100px; background-color: darkorange; color: white" @onclick='() => SetOperation("-")'>-</button>
            </div>
            <div class="d-flex flex-row justify-content-around">
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("1")'>1</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("2")'>2</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("3")'>3</button>
                <button class="btn rounded-circle" style="width: 100px; height: 100px; background-color: darkorange; color: white" @onclick='() => SetOperation("+")'>+</button>
            </div>
            <div class="d-flex flex-row justify-content-around">
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px">±</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px" @onclick='() => InputNumber("0")'>0</button>
                <button class="btn btn-dark rounded-circle" style="width: 100px; height: 100px; font-size: 30px">,</button>
                <button class="btn rounded-circle" style="width: 100px; height: 100px; background-color: darkorange; color: white" @onclick="Calculate">=</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string displayValue = "0"; // Pour afficher l'expression
    private double currentResult = 0; // Pour stocker le résultat courant

    private void InputNumber(string number)
    {
        // Ajouter le nombre à l'affichage
        if (string.IsNullOrEmpty(displayValue) || displayValue == "0")
        {
            displayValue = number; // Si rien n'est affiché ou affichage est "0", remplacer par ce nombre
        }
        else
        {
            displayValue += number; // Ajouter le nombre à l'affichage
        }
    }

    private void SetOperation(string operation)
    {
        // Vérifiez si le dernier caractère de l'affichage est déjà un opérateur
        if (!string.IsNullOrEmpty(displayValue) && !IsLastCharacterOperator())
        {
            displayValue += " " + operation + " "; // Ajoute l'opération à l'affichage
        }
    }

    private bool IsLastCharacterOperator()
    {
        // Vérifie si le dernier caractère est un opérateur
        var lastChar = displayValue.Trim().LastOrDefault();
        return lastChar == '+' || lastChar == '-' || lastChar == '×' || lastChar == '÷';
    }

    private void Calculate()
    {
        // Effectuer le calcul sur les nombres affichés
        var parts = displayValue.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        double total = 0;

        // Initialiser la variable pour l'opérateur actuel
        string currentOperator = "+";

        // Parcourir les parties de l'expression (nombres et opérateurs)
        foreach (var part in parts)
        {
            if (double.TryParse(part.Replace(",", "."), out double num))
            {
                // Addition ou soustraction selon l'opérateur actuel
                if (currentOperator == "+")
                {
                    total += num;
                }
                else if (currentOperator == "-")
                {
                    total -= num;
                }
                else if (currentOperator == "×")
                {
                    total *= num;
                }
                else if (currentOperator == "÷")
                {
                    total /= num;
                }
                else if (currentOperator == "%")
                {
                    total %= num;
                }
            }
            else
            {
                // Mettre à jour l'opérateur actuel (+ ou -)
                currentOperator = part;
            }
        }

        // Mettre à jour l'affichage avec le total
        displayValue = total.ToString().Replace(".", ","); // Affiche le résultat final avec virgule
    }

    private void Reset()
    {
        displayValue = "0"; // Réinitialise l'affichage
        currentResult = 0; // Réinitialise le résultat courant
    }
}
