@page "/windows-calculator"
@rendermode InteractiveServer

<PageTitle>Windows Calculator</PageTitle>

<div class="d-flex flex-column justify-content-center align-items-center w-100 h-100">
    <h1>Windows Calculator</h1>

    <div class="bg-dark" style="width: 350px; height: 600px; border-radius: 15px; padding: 20px;">
        <!-- Top Display: Full Formula -->
        <div class="text-white" style="height: 40px; margin-bottom: 5px; text-align: right; font-size: 16px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
            @fullExpression
        </div>

        <div class="d-flex justify-content-end align-items-end text-white display-6" style="height: 70px; margin-bottom: 10px;">
            <p role="status" class="mb-0">@displayValue</p>
        </div>

        <div class="d-flex flex-column gap-2">
            <div class="d-flex justify-content-between">
                <button class="btn btn-secondary rounded-circle" style="width: 60px; height: 60px;" @onclick="Reset">AC</button>
                <button class="btn btn-secondary rounded-circle" style="width: 60px; height: 60px;" @onclick="ToggleSign">+/-</button>
                <button class="btn btn-secondary rounded-circle" style="width: 60px; height: 60px;" @onclick='() => SetOperation("%")'>%</button>
                <div style="width: 60px; height: 60px; background: transparent"></div>
            </div>

            <div class="d-flex justify-content-between">
                <button class="btn btn-secondary rounded-circle" style="width: 60px; height: 60px;" @onclick="Reciprocal">1/x</button>
                <button class="btn btn-secondary rounded-circle" style="width: 60px; height: 60px;" @onclick="Square">x²</button>
                <button class="btn btn-secondary rounded-circle" style="width: 60px; height: 60px;" @onclick="SquareRoot">√x</button>
                <button class="btn btn-warning rounded-circle text-white" style="width: 60px; height: 60px;" @onclick='() => SetOperation("×")'>×</button>
            </div>

            @foreach (var row in buttonRows)
            {
                <div class="d-flex justify-content-between">
                    @foreach (var button in row)
                    {
                        <button class="btn rounded-circle" style="width: 60px; height: 60px; font-size: 20px; @GetButtonStyle(button)" @onclick="() => OnButtonClick(button)">
                            @button
                        </button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string displayValue = "0";
    private string fullExpression = "";
    private double currentResult = 0;
    private string currentOperator = "";
    private bool isNewInput = true;

    private readonly string[][] buttonRows = new[]
    {
        new[] { "7", "8", "9", "÷" },
        new[] { "4", "5", "6", "-" },
        new[] { "1", "2", "3", "+" },
        new[] { "⌫", "0", ".", "=" }
    };

    private void OnButtonClick(string button)
    {
        if (double.TryParse(button, out _) || button == ".")
        {
            InputNumber(button);
        }
        else if (button == "=")
        {
            Calculate();
        }
        else if (button == "⌫")
        {
            DeleteLastCharacter();
        }
        else
        {
            SetOperation(button);
        }
    }

    private void InputNumber(string input)
    {
        if (isNewInput)
        {
            displayValue = input == "." ? "0." : input;
            isNewInput = false;
        }
        else if (input == "." && displayValue.Contains("."))
        {
        } // Ignore second decimal point
        else
        {
            displayValue += input;
        }

        UpdateFullExpression();
    }

    private void SetOperation(string operation)
    {
        if (!string.IsNullOrEmpty(displayValue))
        {
            if (!string.IsNullOrEmpty(currentOperator))
            {
                Calculate();
            }

            currentResult = double.Parse(displayValue.Replace(",", "."));
            currentOperator = operation;
            fullExpression += $" {displayValue} {operation}";
            isNewInput = true;
        }
    }

    private void Calculate()
    {
        if (string.IsNullOrEmpty(currentOperator)) return;

        double secondOperand = double.Parse(displayValue.Replace(",", "."));
        switch (currentOperator)
        {
            case "+":
                currentResult += secondOperand;
                break;
            case "-":
                currentResult -= secondOperand;
                break;
            case "×":
                currentResult *= secondOperand;
                break;
            case "÷":
                currentResult /= secondOperand;
                break;
            case "%":
                currentResult %= secondOperand;
                break;
        }

        fullExpression += $" {displayValue} =";
        displayValue = currentResult.ToString().Replace(".", ",");
        currentOperator = "";
        isNewInput = true;
    }

    private void Reciprocal()
    {
        if (double.TryParse(displayValue.Replace(",", "."), out double num) && num != 0)
        {
            fullExpression += $" 1/({displayValue})";
            displayValue = (1 / num).ToString().Replace(".", ",");
        }
    }

    private void Square()
    {
        if (double.TryParse(displayValue.Replace(",", "."), out double num))
        {
            fullExpression += $" ({displayValue})²";
            displayValue = (num * num).ToString().Replace(".", ",");
        }
    }

    private void SquareRoot()
    {
        if (double.TryParse(displayValue.Replace(",", "."), out double num) && num >= 0)
        {
            fullExpression += $" √({displayValue})";
            displayValue = Math.Sqrt(num).ToString().Replace(".", ",");
        }
    }

    private void ToggleSign()
    {
        if (double.TryParse(displayValue.Replace(",", "."), out double num))
        {
            displayValue = (-num).ToString().Replace(".", ",");
            UpdateFullExpression();
        }
    }

    private void DeleteLastCharacter()
    {
        if (!string.IsNullOrEmpty(displayValue) && displayValue.Length > 1)
        {
            displayValue = displayValue.Substring(0, displayValue.Length - 1);
        }
        else
        {
            displayValue = "0";
        }

        UpdateFullExpression();
    }

    private void Reset()
    {
        displayValue = "0";
        fullExpression = "";
        currentResult = 0;
        currentOperator = "";
        isNewInput = true;
    }

    private void UpdateFullExpression()
    {
        if (string.IsNullOrEmpty(currentOperator))
        {
            fullExpression = displayValue;
        }
    }

    private string GetButtonStyle(string button)
    {
        return button == "=" || button == "+" || button == "-" || button == "×" || button == "÷"
            ? "background-color: orange; color: white;"
            : "background-color: #333; color: white;";
    }

}